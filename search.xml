<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>优秀 excellent</title>
    <url>/2019/04/03/%E4%BC%98%E7%A7%80%20excellent/</url>
    <content><![CDATA[<h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2>
<h3 id="优秀"><a class="header-anchor" href="#优秀">¶</a>优秀</h3>
<p>(excellent.cpp/c/pas)</p>
<h4 id="题目描述："><a class="header-anchor" href="#题目描述：">¶</a>题目描述：</h4>
<p>有n个人，决定选出他们中最优秀的人</p>
<a id="more"></a>
<h4 id="输入描述："><a class="header-anchor" href="#输入描述：">¶</a>输入描述：</h4>
<p>第一行一个n表示有n个人参与了投票，下一行n个数，第i个数表示第i个人投给了谁，每个人会且只会投给一个人，问得到票数最多的人是谁，数据保证得到票数最多的人得到的票数一定大于n/2。</p>
<h4 id="输出描述："><a class="header-anchor" href="#输出描述：">¶</a>输出描述：</h4>
<p>一行一个整数表示最优秀的人</p>
<h4 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h4>
<pre><code>5
1 2 1 1 3
</code></pre>
<h4 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h4>
<pre><code>1
</code></pre>
<h4 id="数据范围："><a class="header-anchor" href="#数据范围：">¶</a>数据范围：</h4>
<p>对于60%的数据1&lt;=n&lt;=2000	
对于80%的数据1&lt;=n&lt;=2000000空间128M		
对于100%的数据1&lt;=n&lt;=2000000空间10M</p>
<h2 id="补充说明"><a class="header-anchor" href="#补充说明">¶</a>补充说明</h2>
<p>输入的投票不一定小于等于n!</p>
<h2 id="题解"><a class="header-anchor" href="#题解">¶</a>题解</h2>
<p><strong>摩尔投票法</strong></p>
<p>简单说明：</p>
<blockquote>
<p>摩尔投票算法是基于这个事实：每次从序列里选择两个不相同的数字删除掉（或称为“抵消”），最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个。
个人觉得比较好的说明：
<a href="https://www.zhihu.com/question/49973163/answer/235921864" target="_blank" rel="noopener">如何理解摩尔投票算法？ - 喝七喜的回答 - 知乎</a></p>
</blockquote>
<h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get_char</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">2</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buffer[SIZE], *S, *T;</span><br><span class="line">	<span class="keyword">if</span> (S == T)</span><br><span class="line">	&#123;</span><br><span class="line">		T = (S = buffer) + fread(buffer, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">		<span class="keyword">if</span> (S == T) <span class="keyword">return</span> EOF;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar get_char</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_int</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (c = getchar(); c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>; c = getchar())</span><br><span class="line">		;</span><br><span class="line">	<span class="keyword">for</span> (; c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>; c = getchar())</span><br><span class="line">		ret = (ret &lt;&lt; <span class="number">1</span>) + (ret &lt;&lt; <span class="number">3</span>) + (c - <span class="string">'0'</span>);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	freopen(<span class="string">"excellent.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">"excellent.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n = get_int(), a = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = get_int();</span><br><span class="line">		a = tmp == k ? a + <span class="number">1</span> : a - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a &lt; <span class="number">0</span>) k = tmp, a = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>摩尔投票法</tag>
      </tags>
  </entry>
  <entry>
    <title>19-3-27模拟赛T3 队列 queue</title>
    <url>/2019/03/27/19-3-27%E6%A8%A1%E6%8B%9F%E8%B5%9BT3-%E9%98%9F%E5%88%97-queue/</url>
    <content><![CDATA[<h2 id="原题-CF118D"><a class="header-anchor" href="#原题-CF118D">¶</a>原题:<a href="http://codeforces.com/problemset/problem/118/D" target="_blank" rel="noopener">CF118D</a></h2>
<h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2>
<h3 id="队列-queue-pas-cpp-c"><a class="header-anchor" href="#队列-queue-pas-cpp-c">¶</a>队列(queue.pas/cpp/c)</h3>
<h4 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2">¶</a>题目描述</h4>
<p>小f很喜欢动漫，其中她最喜欢看海绵宝宝，有一天她拥有了n1个黄色海绵宝宝玩偶和n2个“粉红大胖呆”派大星玩偶。她要给这n1+n2个玩偶排排队（为什么要排队呢？很无聊吧<s>我们可以把小f看做一个很捏戳的人</s>）。但是为了使排的队列比较美观，小f不允许有超过k1个海绵宝宝排在一起，也不允许有超过k2个派大星排在一起。
现在告诉你n1，n2，k1，k2，问你一共有多少种可行的排列方式。</p>
<p>由于结果可能很大，只需要把结果mod 100000000输出即可。</p>
<h4 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式</h4>
<p>第一行四个用空格隔开的非负整数n1,n2,k1,k2</p>
<h4 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式</h4>
<p>一行一个非负整数</p>
<h4 id="样例"><a class="header-anchor" href="#样例">¶</a>样例</h4>
<p>queue.in</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 3 1 2</span><br><span class="line"></span><br><span class="line">2 4 1 1</span><br></pre></td></tr></table></figure>
<p>queue.out</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<p>第一组样例说明
合法的序列有：12122, 12212, 21212, 21221, 22121
1是海绵宝宝，2是派大星。
数据规模及约定</p>
<ul>
<li>30%的数据 n1+n2&lt;=20</li>
<li>100%的数据 n1,n2&lt;=100    k1,k2&lt;=10</li>
</ul>
<p>f[i][j][k]表示当前在做第i个，已经选了j个海绵宝宝，当前这一位是海绵宝宝还是派大星</p>
<p>状态转移方程:
f[i][j][0]=f[i][j][0]+f[i-k][j-k][1];
f[i][j][1]=f[i][j][1]+f[i-k][j][0];</p>
<p>最后输出f[n1+n2][n1][0]+f[n1+n2][n1][1]</p>
<p>注意模P</p>
<p>优美的循环:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>,P=<span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">int</span> f[(N&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>][N+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	freopen(<span class="string">"queue.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">"queue.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n1,n2,k1,k2;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n1,&amp;n2,&amp;k1,&amp;k2);</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>%P;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1+n2;++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=max(<span class="number">0</span>,i-n2);j&lt;=n1&amp;&amp;j&lt;=i;++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=k1&amp;&amp;k&lt;=j;++k) f[i][j][<span class="number">0</span>]=(f[i][j][<span class="number">0</span>]+f[i-k][j-k][<span class="number">1</span>])%P;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=k2&amp;&amp;k&lt;=i-j;++k) f[i][j][<span class="number">1</span>]=(f[i][j][<span class="number">1</span>]+f[i-k][j][<span class="number">0</span>])%P;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,(f[n1+n2][n1][<span class="number">0</span>]+f[n1+n2][n1][<span class="number">1</span>])%P);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>19-3-27模拟赛T2 幸运数 lucky</title>
    <url>/2019/03/27/19-3-27%E6%A8%A1%E6%8B%9F%E8%B5%9BT2-%E5%B9%B8%E8%BF%90%E6%95%B0-lucky/</url>
    <content><![CDATA[<h2 id="原题-CF118C"><a class="header-anchor" href="#原题-CF118C">¶</a>原题:<a href="http://codeforces.com/problemset/problem/118/C" target="_blank" rel="noopener">CF118C</a></h2>
<h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2>
<h3 id="幸运数-lucky-pas-cpp-c"><a class="header-anchor" href="#幸运数-lucky-pas-cpp-c">¶</a>幸运数(lucky.pas/cpp/c)</h3>
<h4 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2">¶</a>题目描述</h4>
<p>小f是一个喜欢数学的人，她特别喜欢一些数字。
她认为的幸运数必须满足的要求是该数当中某个数字出现的次数大于等于K。举个例子当K=3时，1112就是幸运数字，因为1的次数大于等于3了，但是11244就不是幸运数字。
现在告诉你小f的k值和一个n位数字S，现在我们需要把S修改成幸运数字（如果S一开始就是幸运数字修改代价就是0）。</p>
<ul>
<li>修改操作的定义：改变S的一些数位上的数字。</li>
<li>修改代价的定义：修改操作后的数字与原数位上的数字的差的绝对值的和。
注意：修改过后S任然是一个n位数。
S可能含前导0。</li>
</ul>
<h4 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式</h4>
<p>第一行两个用空格隔开的正整数N(N&lt;=10000)和k，表示接下来是一个N位数，小f告诉你的K值，第二行一个N位正整数S。</p>
<h4 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式</h4>
<p>第一行一个数，表示最小修改代价，第二行表示在最小修改代价时的幸运数，如果有多个，输出字典序最小的那一个。（输出的解可能含前导0）</p>
<h4 id="样例"><a class="header-anchor" href="#样例">¶</a>样例</h4>
<p>lucky.in</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 5</span><br><span class="line">898196</span><br><span class="line"></span><br><span class="line">3 2</span><br><span class="line">533</span><br><span class="line"></span><br><span class="line">10 6</span><br><span class="line">0001112223</span><br></pre></td></tr></table></figure>
<p>lucky.out</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">888188</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line">533</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">0000002223</span><br></pre></td></tr></table></figure>
<h4 id="数据规模及约定"><a class="header-anchor" href="#数据规模及约定">¶</a>数据规模及约定</h4>
<ul>
<li>20%的数据 k&lt;=N&lt;=10</li>
<li>50%的数据 k&lt;=N&lt;=1000</li>
<li>100%的数据1&lt;=k&lt;=N&lt;=10000</li>
</ul>
<p>记录所有数字出现次数，枚举最终个数大于等于k的数字a，从差比较小的数开始改成a，注意如果被改的数比a大，从前向后改，否则从后向前改，最后统计最小</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">char</span> s[N + <span class="number">1</span>], ans[<span class="number">10</span>][N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">10</span>], c[<span class="number">10</span>], ss[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	freopen(<span class="string">"lucky.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">"lucky.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k, p = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;k, s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">		++cnt[s[i] - <span class="string">'0'</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp1 = k - cnt[i], j = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (tmp1 &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp2;</span><br><span class="line">			<span class="keyword">if</span> (i + j &lt; <span class="number">10</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp2 = min(tmp1, cnt[i + j]);</span><br><span class="line">				tmp1 -= tmp2;</span><br><span class="line">				c[i + j] = tmp2;</span><br><span class="line">				ss[i] += tmp2 * j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i - j &gt;= <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp2 = min(tmp1, cnt[i - j]);</span><br><span class="line">				tmp1 -= tmp2;</span><br><span class="line">				c[i - j] = tmp2;</span><br><span class="line">				ss[i] += tmp2 * j;</span><br><span class="line">			&#125;</span><br><span class="line">			++j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">			<span class="keyword">if</span> (s[j] - <span class="string">'0'</span> &gt; i &amp;&amp; c[s[j] - <span class="string">'0'</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				--c[s[j] - <span class="string">'0'</span>];</span><br><span class="line">				ans[i][j] = i + <span class="string">'0'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; ~j; --j)</span><br><span class="line">			<span class="keyword">if</span> (s[j] - <span class="string">'0'</span> &lt; i &amp;&amp; c[s[j] - <span class="string">'0'</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				--c[s[j] - <span class="string">'0'</span>];</span><br><span class="line">				ans[i][j] = i + <span class="string">'0'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">			<span class="keyword">if</span> (!ans[i][j])</span><br><span class="line">				ans[i][j] = s[j];</span><br><span class="line">		<span class="keyword">if</span> (ss[i] == ss[p] ? <span class="built_in">strcmp</span>(ans[i], ans[p]) &lt; <span class="number">0</span> : ss[i] &lt; ss[p])</span><br><span class="line">			p = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n%s"</span>, ss[p], ans[p]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>模拟</tag>
        <tag>贪心</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>19-3-27模拟赛T1 单圈 cycle</title>
    <url>/2019/03/27/19-3-27%E6%A8%A1%E6%8B%9F%E8%B5%9BT1-%E5%8D%95%E5%9C%88-cycle/</url>
    <content><![CDATA[<h2 id="原题-CF117C"><a class="header-anchor" href="#原题-CF117C">¶</a>原题:<a href="http://codeforces.com/problemset/problem/117/C" target="_blank" rel="noopener">CF117C</a></h2>
<h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2>
<h3 id="单圈-cycle-pas-cpp-c"><a class="header-anchor" href="#单圈-cycle-pas-cpp-c">¶</a>单圈(cycle.pas/cpp/c)</h3>
<h4 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2">¶</a>题目描述</h4>
<p>最近小f在研究图论的问题，小f对有向图的环特别感兴趣，但是小f希望找出图中所有的环，但是这个这个问题非常困难。
现在小f把这个问题化简，她只需要找到有向图中的一个单圈就可以了。
单圈的定义：单圈有三个点A，B，C组成，满足A--&gt;B（有向边），B--&gt;C，C--&gt;A（存在A到B，B到C，C到A这三条有向边,且A，B，C为三个不同的点）
因为图中可能有多个单圈你只要输出其中一个即可,若找不到一个单圈，则输出-1。</p>
<h4 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式</h4>
<p>第一行一个正整数N，即该有向图有N个点，接下来一个N*N的邻接矩阵map，若map[i][j]=1,则表示点i到点j有一条有向边。</p>
<h4 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式</h4>
<p>一行用空格隔开的三个正整数或者找不到输出-1。</p>
<h4 id="样例"><a class="header-anchor" href="#样例">¶</a>样例</h4>
<p>cycle.in</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">00100</span><br><span class="line">10000</span><br><span class="line">01001</span><br><span class="line">11101</span><br><span class="line">11000</span><br></pre></td></tr></table></figure>
<p>cycle.out</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 3 2</span><br></pre></td></tr></table></figure>
<h4 id="数据规模及约定"><a class="header-anchor" href="#数据规模及约定">¶</a>数据规模及约定</h4>
<ul>
<li>40%的数据 N&lt;=100</li>
<li>100%的数据 N&lt;=5000</li>
</ul>
<p>直接DFS/BFS判环，记录父亲节点，如果访问到爷爷节点即为答案
坑点：按A-&gt;B-&gt;C输出
DFS:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">char</span> s[N + <span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> g[N + <span class="number">1</span>][N], cnt[N + <span class="number">1</span>], fa[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[k] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt[k]; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v = g[k][i];</span><br><span class="line">		<span class="keyword">if</span> (v == fa[fa[k]])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, v, fa[k], k);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!vis[v])</span><br><span class="line">		&#123;</span><br><span class="line">			fa[v] = k;</span><br><span class="line">			dfs(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	freopen(<span class="string">"cycle.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">"cycle.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		gets(s);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">'1'</span>)</span><br><span class="line">				g[i][cnt[i]++] = j + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">		<span class="keyword">if</span> (!vis[i])</span><br><span class="line">			dfs(i);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
        <tag>Codeforces</tag>
        <tag>环</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>OI实用工具 持续更新ing</title>
    <url>/2019/03/21/OI%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ing/</url>
    <content><![CDATA[<p>专为各种模拟赛设计的实用工具，还在持续更新中，隔段时间来看看会有惊喜</p>
<p>目前已经实现：</p>
<ul>
<li>快速自动建立所有需要的文件夹和文件</li>
<li>自动导入模板</li>
<li>自定义缺省源</li>
<li>带计时的自动对拍</li>
</ul>
<p>正在实现：</p>
<ul>
<li>简单的配置文件</li>
<li>图形界面</li>
<li>自动编译</li>
<li>常见数据生成器</li>
<li>更友好的报错</li>
<li>更准确的计时</li>
</ul>
<p>项目地址：https://github.com/sxyz2019/OIer-Auxiliary</p>
<p><a href="https://github.com/sxyz2019/OIer-Auxiliary/releases/latest" target="_blank" rel="noopener">下载</a>(注：可能会落后代码几个版本，毕竟要测试)</p>
<p>欢迎提出BUG以及新功能的想法</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具相关</tag>
      </tags>
  </entry>
  <entry>
    <title>关于最大连续子段和</title>
    <url>/2019/03/21/%E5%85%B3%E4%BA%8E%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%AE%B5%E5%92%8C/</url>
    <content><![CDATA[<p>如果一定要取一个数，把还原为0写在记录最小值后面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sum+=a[i];</span><br><span class="line">ans=max(ans,sum);</span><br><span class="line">sum=sum&lt;<span class="number">0</span>?<span class="number">0</span>:sum;</span><br></pre></td></tr></table></figure>
<p>否则写在前面</p>
<p>环上求最大连续子段和：
先做一遍最大连续子段和
再做一遍最小连续子段和
max(总和-最小连续子段和,最大连续子段和)即为答案
注：一定要取一个时要特判</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>最大连续子段和</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 滑稽树前做游戏，滑稽树后做交易 trade</title>
    <url>/2019/03/21/%E9%A2%98%E8%A7%A3-%E6%BB%91%E7%A8%BD%E6%A0%91%E5%89%8D%E5%81%9A%E6%B8%B8%E6%88%8F%EF%BC%8C%E6%BB%91%E7%A8%BD%E6%A0%91%E5%90%8E%E5%81%9A%E4%BA%A4%E6%98%93-trade/</url>
    <content><![CDATA[<p>题目名称我就不吐槽了。。。</p>
<h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2>
<h3 id="滑稽树前做游戏，滑稽树后做交易"><a class="header-anchor" href="#滑稽树前做游戏，滑稽树后做交易">¶</a>滑稽树前做游戏，滑稽树后做交易</h3>
<p>(trade.cpp,3000ms,1024MB)</p>
<h4 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2">¶</a>题目描述</h4>
<p>滑稽果被排成一列，poison 的 lsr 要求每个顾客只能买一段连续的区间。</p>
<p>sxd 来这里买滑稽果，他对每个滑稽果都有一个喜爱程度 Ai 是一个整数，-100≤Ai≤100，</p>
<p>并保证∑Ai &lt;=2147483647，最终的满意度为所有他买到的滑稽果的喜欢程度之和，如果和</p>
<p>为正（不管是正多少，只要大于 0 即可），则他满意了。</p>
<p>现在 sxd 想知道在他满意的条件下最多能买到多少滑稽果。</p>
<h4 id="输入描述"><a class="header-anchor" href="#输入描述">¶</a>输入描述</h4>
<p>第一行一个正整数 n，表示 lsr 一共摘了 n 个滑稽果。</p>
<p>第二行 n 个整数，每个整数 Ai 表示 sxd 第 i 个滑稽果的喜爱程度为多少。</p>
<h4 id="输出描述"><a class="header-anchor" href="#输出描述">¶</a>输出描述</h4>
<p>一行一个正整数 ans 表示在 sxd 满意的条件下最多能买到多少滑稽果</p>
<h4 id="输入样例"><a class="header-anchor" href="#输入样例">¶</a>输入样例</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">0 0 -7 -6 1</span><br></pre></td></tr></table></figure>
<h4 id="输出样例"><a class="header-anchor" href="#输出样例">¶</a>输出样例</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="数据范围及提示"><a class="header-anchor" href="#数据范围及提示">¶</a>数据范围及提示</h4>
<p>对于 30%的数据，n&lt;=5*10^3</p>
<p>对于 60%的数据，n&lt;=10^5</p>
<p>对于所有数据，n&lt;=3*10^7</p>
<p>请注意本题的内存限制，完成代码后请务必计算一下你程序的内存是否超限。</p>
<p>由于本题的输入过大，请必须使用基于 fread 的输入模板，见题目目录下的 fastIO.cpp</p>
<h2 id="题解"><a class="header-anchor" href="#题解">¶</a>题解</h2>
<p><strong>区间伸缩(尺取法)</strong></p>
<h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2>
<p>ver.0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::max;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30000000</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],sum[N+<span class="number">1</span>],s[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">12</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">12</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd c = gc()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dd;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); dd)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); dd)</span><br><span class="line">        x = (x&lt;&lt;<span class="number">1</span>) + (x&lt;&lt;<span class="number">3</span>) + (c^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x = -x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> dd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"trade.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"trade.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> n,ans=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) a[i]=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;~i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i]=sum[i+<span class="number">1</span>]+a[i];</span><br><span class="line">        s[i]=min(sum[i],s[i+<span class="number">1</span>]);<span class="comment">//s[n]=0,代表取从i开始取全部,需要更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        r=max(r,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (r&lt;=n&amp;&amp;s[r]&lt;sum[i])<span class="comment">//到n为止,代表取从i开始取全部,需要更新</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans=max(ans,r-i);</span><br><span class="line">            ++r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r==n) <span class="keyword">break</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ver.1 优化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30000000</span>;</span><br><span class="line"><span class="keyword">int</span> sum[N + <span class="number">1</span>], s[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">24</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">	<span class="keyword">return</span> (p1 == p2) &amp;&amp; (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">24</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd c = gc()</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">	x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> dd;</span><br><span class="line">	<span class="keyword">bool</span> f = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(c); dd)</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">			f = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); dd)</span><br><span class="line">		x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">return</span> f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> dd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	freopen(<span class="string">"trade.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	freopen(<span class="string">"trade.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">int</span> n, ans = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">	n = read();</span><br><span class="line">	sum[<span class="number">0</span>] = read();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		sum[i] = sum[i - <span class="number">1</span>] + read();</span><br><span class="line">	s[n - <span class="number">1</span>] = sum[n - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i)</span><br><span class="line">		s[i] = max(sum[i], s[i + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; r &lt; n; ++i, ++r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n - i &lt;= ans)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (s[r] &lt;= sum[i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">while</span> (r &lt;= n &amp;&amp; s[r] &gt; sum[i])</span><br><span class="line">			++r;</span><br><span class="line">		ans = r - <span class="number">1</span> - i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>尺取法</tag>
      </tags>
  </entry>
  <entry>
    <title>题解Luogu P2749 【[USACO5.1]夜空繁星Starry Night】</title>
    <url>/2019/03/21/%E9%A2%98%E8%A7%A3Luogu-P2749-%E3%80%90-USACO5-1-%E5%A4%9C%E7%A9%BA%E7%B9%81%E6%98%9FStarry-Night%E3%80%91/</url>
    <content><![CDATA[<p>HASH判重</p>
<p>我的方法可能比较奇怪</p>
<p>注意一定要判断截出来矩形的形状和图形内部其他图形</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">510</span>, dx[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">		  dy[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> ll key[<span class="number">5</span>] = &#123;<span class="number">998244353</span>, <span class="number">1004535809</span>, <span class="number">1000000007</span>, <span class="number">1000000009</span>, <span class="number">123468723167</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[N][N], ans[M], c = <span class="string">'a'</span>;</span><br><span class="line">ll ht[M][<span class="number">8</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> vis[N][N], k1[M], k2[M], k3[M], k4[M], cnt, n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	k1[cnt] = min(k1[cnt], x);</span><br><span class="line">	k2[cnt] = max(k2[cnt], x);</span><br><span class="line">	k3[cnt] = min(k3[cnt], y);</span><br><span class="line">	k4[cnt] = max(k4[cnt], y);</span><br><span class="line">	vis[x][y] = cnt;</span><br><span class="line">	s[x][y] = <span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tx = x + dx[i], ty = y + dy[i];</span><br><span class="line">		<span class="keyword">if</span> (~tx &amp;&amp; tx &lt; n &amp;&amp; ~ty &amp;&amp; ty &lt; m &amp;&amp; s[tx][ty] == <span class="string">'1'</span>) dfs(tx, ty);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash1</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k1[k]; i &lt;= k2[k]; ++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k3[k]; j &lt;= k4[k]; ++j)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">0</span>][p] = ((ht[k][<span class="number">0</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash2</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k2[k]; i &gt;= k1[k]; --i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k3[k]; j &lt;= k4[k]; ++j)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">1</span>][p] = ((ht[k][<span class="number">1</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash3</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k1[k]; i &lt;= k2[k]; ++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k4[k]; j &gt;= k3[k]; --j)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">2</span>][p] = ((ht[k][<span class="number">2</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash4</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k2[k]; i &gt;= k1[k]; --i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k4[k]; j &gt;= k3[k]; --j)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">3</span>][p] = ((ht[k][<span class="number">3</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash5</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = k3[k]; j &lt;= k4[k]; ++j)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k1[k]; i &lt;= k2[k]; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">4</span>][p] = ((ht[k][<span class="number">4</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash6</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = k3[k]; j &lt;= k4[k]; ++j)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k2[k]; i &gt;= k1[k]; --i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">5</span>][p] = ((ht[k][<span class="number">5</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash7</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = k4[k]; j &gt;= k3[k]; --j)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k1[k]; i &lt;= k2[k]; ++i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">6</span>][p] = ((ht[k][<span class="number">6</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hash8</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = k4[k]; j &gt;= k3[k]; --j)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k2[k]; i &gt;= k1[k]; --i)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">				ht[k][<span class="number">7</span>][p] = ((ht[k][<span class="number">7</span>][p] &lt;&lt; <span class="number">1</span>) + (vis[i][j] == k)) % key[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">	<span class="built_in">memset</span>(k1, <span class="number">127</span>, <span class="keyword">sizeof</span> k1);</span><br><span class="line">	<span class="built_in">memset</span>(k3, <span class="number">127</span>, <span class="keyword">sizeof</span> k3);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">			<span class="keyword">if</span> (s[i][j] == <span class="string">'1'</span>) ++cnt, dfs(i, j);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		hash1(i);</span><br><span class="line">		hash2(i);</span><br><span class="line">		hash3(i);</span><br><span class="line">		hash4(i);</span><br><span class="line">		hash5(i);</span><br><span class="line">		hash6(i);</span><br><span class="line">		hash7(i);</span><br><span class="line">		hash8(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">		<span class="keyword">if</span> (!ans[i])</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i] = c++;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= cnt; ++j)</span><br><span class="line">				<span class="keyword">if</span> (k2[j] - k1[j] == k2[i] - k1[i]</span><br><span class="line">					|| k2[j] - k1[j] == k4[i] - k3[i]</span><br><span class="line">					|| k4[j] - k3[j] == k2[i] - k1[i]</span><br><span class="line">					|| k4[j] - k3[j] == k4[i] - k3[i])</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; ++p)</span><br><span class="line">							<span class="keyword">if</span> (ht[i][<span class="number">0</span>][p] != ht[j][k][p])</span><br><span class="line">							&#123;</span><br><span class="line">								flag = <span class="literal">false</span>;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						<span class="keyword">if</span> (flag)</span><br><span class="line">						&#123;</span><br><span class="line">							ans[j] = ans[i];</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">			<span class="built_in">putchar</span>(ans[vis[i][j]] ? ans[vis[i][j]] : <span class="string">'0'</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF353A 【Domino】</title>
    <url>/2019/03/21/%E9%A2%98%E8%A7%A3-CF353A-%E3%80%90Domino%E3%80%91/</url>
    <content><![CDATA[<p>判断上下奇偶性并判断有没有上下奇偶性不一致的牌即可
分4种情况讨论</p>
<ul>
<li>奇偶性不同怎么变都不行，输出-1</li>
<li>都是偶数直接输出0</li>
<li>都是奇数需要找到上下奇偶性不同的牌，输出1，否则不可能，输出-1</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> a, b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">		<span class="keyword">if</span> ((a &amp; <span class="number">1</span>) ^ (b &amp; <span class="number">1</span>)) flag = <span class="literal">true</span>;</span><br><span class="line">		c ^= a &amp; <span class="number">1</span>;</span><br><span class="line">		d ^= b &amp; <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c ^ d)</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (c)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (flag)</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>题解Luogu P1217 【[USACO1.5]回文质数 Prime Palindromes】</title>
    <url>/2019/03/21/%E9%A2%98%E8%A7%A3Luogu-P1217-%E3%80%90-USACO1-5-%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0-Prime-Palindromes%E3%80%91/</url>
    <content><![CDATA[<p>没有SPJ差评</p>
<p>有大佬说没有偶数位的答案，然而我并不会证明，而且有11这个特例</p>
<p>所以还是老老实实爆搜吧</p>
<p>生成回文数并判断质数</p>
<p>注意一定要排序。。。被坑了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> s[LEN], l, r, ans[<span class="number">30000</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i)</span><br><span class="line">		<span class="keyword">if</span> (!(n % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) a = a * <span class="number">10</span> + s[i];</span><br><span class="line">	b = a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; ~i; --i) a = a * <span class="number">10</span> + s[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">2</span>; ~i; --i) b = b * <span class="number">10</span> + s[i];</span><br><span class="line">	<span class="keyword">if</span> (b &gt; r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (b &gt;= l &amp;&amp; check(b)) ans[cnt++] = b;</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= l &amp;&amp; a &lt;= r &amp;&amp; check(a)) ans[cnt++] = a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		s[k] = i;</span><br><span class="line">		dfs(k + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">	<span class="keyword">for</span> (s[<span class="number">0</span>] = <span class="number">1</span>; s[<span class="number">0</span>] &lt;= <span class="number">9</span>; s[<span class="number">0</span>] += <span class="number">2</span>) dfs(<span class="number">1</span>);</span><br><span class="line">	sort(ans, ans + cnt);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Luogu</tag>
        <tag>判断质数</tag>
      </tags>
  </entry>
  <entry>
    <title>题解Lougu P1314 【聪明的质监员】</title>
    <url>/2019/03/21/%E9%A2%98%E8%A7%A3Lougu-P1314-%E3%80%90%E8%81%AA%E6%98%8E%E7%9A%84%E8%B4%A8%E7%9B%91%E5%91%98%E3%80%91/</url>
    <content><![CDATA[<p>pascal题解~</p>
<p>二分枚举w,然后计算对应的y</p>
<p>注意使用前缀和优化,可以让y的计算达到O(n+m)</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  w,v,l,r,sum,t:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">200000</span>] <span class="keyword">of</span> longint;</span><br><span class="line">  n,m,i,left,right,mid:longint;</span><br><span class="line">  s,t1,t2:int64;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">(k:longint)</span>:</span>int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    sum[i]:=sum[i-<span class="number">1</span>]; t[i]:=t[i-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> w[i]&gt;=k <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(sum[i]); inc(t[i],v[i]);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  calc:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> inc(calc,(sum[r[i]]-sum[l[i]-<span class="number">1</span>])*(t[r[i]]-t[l[i]-<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">read</span>(n,m,s);</span><br><span class="line">  left:=maxlongint;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(w[i],v[i]);</span><br><span class="line">    <span class="keyword">if</span> v[i]&lt;left <span class="keyword">then</span> left:=v[i];</span><br><span class="line">    <span class="keyword">if</span> v[i]&gt;right <span class="keyword">then</span> right:=v[i];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  inc(right);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">read</span>(l[i],r[i]);</span><br><span class="line">  <span class="keyword">while</span> left&lt;=right <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    mid:=(left+right)<span class="keyword">div</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> calc(mid)&lt;s</span><br><span class="line">    <span class="keyword">then</span> right:=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> left:=mid+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  t1:=s-calc(left); t2:=calc(right)-s;</span><br><span class="line">  <span class="keyword">if</span> t1&lt;t2</span><br><span class="line">  <span class="keyword">then</span> <span class="keyword">write</span>(t1)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">write</span>(t2);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>二分查找</tag>
        <tag>枚举答案</tag>
      </tags>
  </entry>
  <entry>
    <title>题解Luogu P2940 【[USACO09FEB]音乐妖精The Leprechaun】</title>
    <url>/2019/03/21/%E9%A2%98%E8%A7%A3Luogu-P2940-%E3%80%90-USACO09FEB-%E9%9F%B3%E4%B9%90%E5%A6%96%E7%B2%BEThe-Leprechaun%E3%80%91/</url>
    <content><![CDATA[<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>算法</p>
<p>把矩阵分成好多个环，用O(n)时间求环上最大连续子段和(对最大连续子段和以及sum减去最小连续子段和取最大值)</p>
<p>注意要特判全部是负数的情况(最大连续子段和可能会一个都不取)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> ma[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, ans = <span class="number">-1E9</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ma[i][j]);</span><br><span class="line">            ans = max(ans, ma[i][j]);</span><br><span class="line">            ma[i + n][j] = ma[i][j + n] = ma[i + n][j + n] = ma[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>, e = <span class="number">0</span>, f = <span class="number">0</span>, g = <span class="number">0</span>, h = <span class="number">0</span>, tmp1 = <span class="number">0</span>,</span><br><span class="line">            tmp2 = <span class="number">0</span>, tmp3 = <span class="number">0</span>, tmp4 = <span class="number">0</span>, sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, sum3 = <span class="number">0</span>,</span><br><span class="line">            sum4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            sum1 += ma[i][j];</span><br><span class="line">            a += ma[i][j];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span>) a = <span class="number">0</span>;</span><br><span class="line">            sum2 += ma[j][i];</span><br><span class="line">            b += ma[j][i];</span><br><span class="line">            <span class="keyword">if</span> (b &lt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">            c += ma[i][j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span>) c = <span class="number">0</span>;</span><br><span class="line">            tmp1 = min(tmp1, c);</span><br><span class="line">            d += ma[j][i];</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) d = <span class="number">0</span>;</span><br><span class="line">            tmp2 = min(tmp2, d);</span><br><span class="line">            sum3 += ma[i + j][j];</span><br><span class="line">            e += ma[i + j][j];</span><br><span class="line">            <span class="keyword">if</span> (e &lt; <span class="number">0</span>) e = <span class="number">0</span>;</span><br><span class="line">            sum4 += ma[j][i + j];</span><br><span class="line">            f += ma[j][i + j];</span><br><span class="line">            <span class="keyword">if</span> (f &lt; <span class="number">0</span>) f = <span class="number">0</span>;</span><br><span class="line">            g += ma[i + j][j];</span><br><span class="line">            <span class="keyword">if</span> (g &gt; <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">            tmp3 = min(tmp3, g);</span><br><span class="line">            h += ma[j][i + j];</span><br><span class="line">            <span class="keyword">if</span> (h &gt; <span class="number">0</span>) h = <span class="number">0</span>;</span><br><span class="line">            tmp4 = min(tmp4, h);</span><br><span class="line">            ans = max(ans, max(max(a, b), max(e, f)));</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans, max(max(sum1 - tmp1, sum2 - tmp2),</span><br><span class="line">                           max(sum3 - tmp3, sum4 - tmp4)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &lt; m - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, tmp = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += ma[i - j][j];</span><br><span class="line">            a += ma[i - j][j];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span>) a = <span class="number">0</span>;</span><br><span class="line">            b += ma[i - j][j];</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">0</span>) b = <span class="number">0</span>;</span><br><span class="line">            tmp = min(tmp, b);</span><br><span class="line">            ans = max(ans, a);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans, sum - tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>环</tag>
        <tag>最大连续子段和</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/03/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2>
<h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
